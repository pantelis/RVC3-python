#FROM debian:bookworm-slim as builder
FROM mcr.microsoft.com/vscode/devcontainers/python:dev-3.10-bookworm

# Build argument for UV extras (cpu or cu128)
ARG UV_EXTRA=cpu

# Build arguments for workspace configuration
ARG WORKSPACE_DIR=/workspaces/rvc3-python
ARG WORKSPACE_USER=vscode

# Set environment variables for Python and UV
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV UV_EXTRA=${UV_EXTRA}
ENV WORKSPACE_DIR=${WORKSPACE_DIR}
ENV WORKSPACE_USER=${WORKSPACE_USER}


RUN \
    --mount=type=cache,target=/var/lib/apt/lists \
    --mount=type=cache,target=/var/cache/apt/archives \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        ca-certificates \
        curl  \
        unzip && \
    rm -rf /var/lib/apt/lists/*


RUN apt-get clean && \
    apt-get update && \
    apt-get install -y --no-install-recommends --fix-missing \
        build-essential binutils \
       cmake cmake-qt-gui curl \
        dbus-x11 \
        ffmpeg \
        gdb gcc g++ gfortran git \
        tar \
        lsb-release \
        procps \
        manpages-dev \
        unzip \
        zip \
        wget \
        xauth \
        swig \
        coreutils \
        util-linux \
        python3-pip python3-dev python3-numpy python3-distutils \
        python3-setuptools python3-pyqt5 python3-opencv \
        libboost-python-dev libboost-thread-dev libatlas-base-dev libavcodec-dev \
        libavformat-dev libavutil-dev libcanberra-gtk3-module libeigen3-dev \
        libglew-dev libgl1-mesa-dev libgl1 libgl1-mesa-glx libglib2.0-0 libgtk2.0-dev \
        libgtk-3-dev libjpeg-dev liblapack-dev \
        liblapacke-dev libopenblas-dev libopencv-dev libpng-dev libpostproc-dev \
        libpq-dev libsm6 libswscale-dev libtbb-dev libtesseract-dev \
        libtiff-dev libtiff5-dev libv4l-dev libx11-dev libxext6 libxine2-dev \
        libxrender-dev libxvidcore-dev libx264-dev libgtkglext1 libgtkglext1-dev \
        libvtk9-dev libdc1394-dev libgstreamer-plugins-base1.0-dev \
        libgstreamer1.0-dev libopenexr-dev \
        openexr \
        pkg-config \
        qv4l2 \
        v4l-utils \
        zlib1g-dev \
        locales \
        graphviz \
        graphviz-dev \
        && locale-gen en_US.UTF-8 \
        && LC_ALL=en_US.UTF-8 \
        && rm -rf /var/lib/apt/lists/* \
        && apt-get clean

RUN pip3 install --no-cache-dir \
        pip \
        setuptools \
        wheel \
        cython

RUN pip3 install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cpu

# Install UV with caching
COPY --from=ghcr.io/astral-sh/uv:latest /uv /uvx /bin/

# Install Node.js (required for some Quarto extensions)
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs

# Quarto
RUN curl -LO https://quarto.org/download/latest/quarto-linux-amd64.deb && \
    dpkg -i quarto-linux-amd64.deb
#RUN quarto install tinytex

RUN curl -sS https://downloads.1password.com/linux/keys/1password.asc | gpg --dearmor > /usr/share/keyrings/1password-archive-keyring.gpg \
    && echo "deb [signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/amd64 stable main" > /etc/apt/sources.list.d/1password.list \
    && apt update \
    && apt install -y 1password-cli

# Create workspace directory
WORKDIR ${WORKSPACE_DIR}

USER vscode
